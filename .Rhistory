tm_shape(lc_303ds) + tm_lines()
library(tidyverse)
library(GISTools)
data(tornados)
library(tmap)
library(sf)
streams <- sf::read_sf("./data/Streams_303_d_.shp")
tm_shape(streams) + tm_lines()
counties <- sf::read_sf("./data/County_Boundaries-_Census.shp")
counties_areas <- sf::st_area(counties)
x <- counties%>%mutate(myArea = st_area(.))
lc <- counties %>% dplyr::filter(., NAME10 == "Lancaster")
lc_303ds <- sf::st_intersection(streams, lc)
tm_shape(lc_303ds) + tm_lines()
tm_shape(lc_303ds) + tm_lines(col = "blue")
tm_shape(lc_303ds) + tm_lines(col = "Waterbody_")
buffs <- sf::st_buffer(lc_303ds, dist = 1000
)
tm_shape(buffs) + tm_polygons(col =
"Waterbody_"
)
parks <- sf::read_sf("./data/State_Park_Locations.shp")
lc_parks <- sf::st_intersection(lc, parks)
tm_shape(lc_parks) + tm_dots(col = "AreaName", size = "Acres")
tm_shape(lc_303ds) + tm_lines(col = "Waterbody_") +
tm_shape(lc_parks) + tm_dots(col = "AreaName", size = 1)
setwd("C:/Users/yooki/OneDrive - University of Nebraska-Lincoln/Desktop/UNL/GEOG 891/GEOG891-git")
library(tidyverse)
library(GISTools)
data(tornados)
library(tmap)
library(sf)
streams <- sf::read_sf("./data/Streams_303_d_.shp")
tm_shape(streams) + tm_lines()
counties <- sf::read_sf("./data/County_Boundaries-_Census.shp")
counties_areas <- sf::st_area(counties)
x <- counties%>%mutate(myArea = st_area(.))
lc <- counties %>% dplyr::filter(., NAME10 == "Lancaster")
lc_303ds <- sf::st_intersection(streams, lc)
tm_shape(lc_303ds) + tm_lines()
tm_shape(lc_303ds) + tm_lines(col = "blue")
tm_shape(lc_303ds) + tm_lines(col = "Waterbody_")
buffs <- sf::st_buffer(lc_303ds, dist = 1000
)
tm_shape(buffs) + tm_polygons(col =
"Waterbody_"
)
parks <- sf::read_sf("./data/State_Park_Locations.shp")
lc_parks <- sf::st_intersection(lc, parks)
tm_shape(lc_parks) + tm_dots(col = "AreaName", size = "Acres")
tm_shape(lc_303ds) + tm_lines(col = "Waterbody_") +
tm_shape(lc_parks) + tm_dots(col = "AreaName", size = 1)
tm_shape(buffs) + tm_polygons(col = "Waterbody_")
parks <- sf::read_sf("./data/State_Park_Locations.shp")
lc_parks <- sf::st_intersection(lc, parks)
tm_shape(lc_parks) + tm_dots(col = "AreaName", size = "Acres")
tm_shape(lc_303ds) + tm_lines(col = "Waterbody_") +
tm_shape(lc_parks) + tm_dots(col = "AreaName", size = 1)
buffstream <- sf::st_buffer(lc_303ds, dist = 804.6) ##0.5mile = 804.6...
tm_shape(buffstream) + tm_lines(col = "Waterbody_", scale = 1)
tm_shape(buffstream) + tm_polygons(col = "Waterbody_", scale = 1)
intersect_parks <- sf::st_intersection(lc_parks, buffstream)
tm_shape(intersect_parks) + tm_dots(col = "AreaName", size = 1)
tm_shape(intersect_parks) + tm_dots(col = "AreaName", size = 1) +
tm_shape(buffstream) + tm_polygons(col = "Waterbody_", scale = 1)
intersect_streams <- sf::st_intersection(buffstream, intersect_parks, prepared = TRUE)
intersect_streams <- sf::st_intersects(buffstream, intersect_parks, prepared = TRUE)
tm_shape(intersect_parks) + tm_dots(col = "AreaName", size = 1) +
tm_shape(intersect_streams) + tm_polygons(col = "Waterbody_")
intersect_streams <- sf::st_intersection(buffstream, intersect_parks, prepared = TRUE)
intersect_streams <- sf::st_intersection(buffstream, intersect_parks, sparse = TRUE)
intersect_streams <- sf::st_intersection(buffstream, intersect_parks, sparse = TRUE)
intersect_streams <- sf::st_touches(buffstream, intersect_parks, prepared = TRUE)
tm_shape(intersect_parks) + tm_dots(col = "AreaName", size = 1) +
tm_shape(intersect_streams) + tm_polygons(col = "Waterbody_")
intersect_streams <- sf::st_touches(buffstream, intersect_parks)
tm_shape(intersect_parks) + tm_dots(col = "AreaName", size = 1) +
tm_shape(intersect_streams) + tm_polygons(col = "Waterbody_")
intersect_streams <- sf::st_touches(buffstream, intersect_parks)
tm_shape(intersect_parks) + tm_dots(col = "AreaName", size = 1) +
tm_shape(intersect_streams) + tm_polygons(col = "Waterbody_")
intersect_parks <- sf::st_intersection(lc_parks, buffstream)
intersect_streams <- sf::st_touches(buffstream, intersect_parks)
tm_shape(intersect_parks) + tm_dots(col = "AreaName", size = 1) +
tm_shape(intersect_streams) + tm_polygons(col = "Waterbody_")
intersect_streams <- sf::st_touches(buffstream, lc_parks)
tm_shape(intersect_parks) + tm_dots(col = "AreaName", size = 1) +
tm_shape(intersect_streams) + tm_polygons(col = "Waterbody_")
class(intersect_streams)
class(intersect_parks)
source("C:/Users/yooki/OneDrive - University of Nebraska-Lincoln/Desktop/UNL/GEOG 891/GEOG891-git/src/9_20.R", echo=TRUE)
intersect_streams <- sf::st_intersection(buffstream, lc_parks)
class(intersect_streams)
tm_shape(intersect_parks) + tm_dots(col = "AreaName", size = 1) +
tm_shape(intersect_streams) + tm_polygons(col = "Waterbody_")
tm_shape(intersect_parks) + tm_dots(col = "AreaName", size = 1) +
tm_shape(intersect_streams) + tm_polygons(col = "Waterbody_")
tm_shape(intersect_parks) + tm_dots(col = "AreaName", size = 1) +
tm_shape(intersect_streams) + tm_dots(col = "Waterbody_")
intersect_streams <- sf::st_touches(buffstream, lc_parks)
tm_shape(intersect_parks) + tm_dots(col = "AreaName", size = 1) +
tm_shape(intersect_streams) + tm_dots(col = "Waterbody_")
intersect_streams <- sf::st_touches(buffstream, lc_parks, prepared = T)
tm_shape(intersect_parks) + tm_dots(col = "AreaName", size = 1) +
tm_shape(intersect_streams) + tm_polygons(col = "Waterbody_")
intersect_streams_poly <- sf::st_area(intersect_streams)
streems <- st_dimension(intersect_streams) = 2
streams <- st_dimension(intersect_streams) = 2
streams <- st_dimension("intersect_streams") = 2
stream <- st_dimension("intersect_streams") = 2
st_dimension("intersect_streams") = 2
st_dimension(intersect_streams) = 2
intersect_streams <- sf::st_contains(buffstream, lc_parks)
tm_shape(intersect_parks) + tm_dots(col = "AreaName", size = 1) +
tm_shape(intersect_streams) + tm_polygons(col = "Waterbody_")
intersect_streams <- sf::st_intersection(buffstream, lc_parks)
st_dimension(intersect_streams) = 2
intersect_streams <- sf::st_intersection(buffstream,)
intersect_streams <- sf::st_intersection(buffstream)
tm_shape(intersect_parks) + tm_dots(col = "AreaName", size = 1) +
tm_shape(intersect_streams) + tm_polygons(col = "Waterbody_")
tm_shape(intersect_streams) + tm_polygons(col = "Waterbody_")
intersect_streams <- sf::st_intersection(buffstream, intersect_parks)
tm_shape(intersect_streams) + tm_dots(col = "AreaName", size = 1)
intersect_streams <- sf::st_intersection(buffstream, intersect_parks, sparse = TRUE, prepared = TRUE)
intersect_streams <- sf::st_intersects(buffstream, intersect_parks, sparse = TRUE, prepared = TRUE)
tm_shape(intersect_streams) + tm_dots(col = "AreaName", size = 1) +
tm_shape(intersect_streams) + tm_polygons(col = "Waterbody_")
intersect_streams <- sf::st_intersection(buffstream, intersect_parks)
View(intersect_parks)
View(intersect_parks)
intersect_parks <- sf::st_intersection(lc_parks, buffstream)
View(intersect_streams)
View(intersect_streams)
tm_shape(intersect_streams) + tm_dots(col = "AreaName", size = 1)
tm_shape(intersect_streams) + tm_polygons(col = "Waterbody_")
tm_shape(intersect_streams) + tm_dots(col = "AreaName", size = 1) +
tm_shape(intersect_streams) + tm_dots(col = "Waterbody_")
tm_shape(intersect_streams) + tm_dots(col = "Waterbody_")
tm_shape(intersect_streams) + tm_dots(col = "AreaName", size = 1) +
tm_shape(intersect_streams) + tm_dots(col = "Waterbody_", size = 3)
tm_shape(intersect_streams) + tm_dots(col = "AreaName", size = 1) +
tm_shape(intersect_streams) + tm_polygons(col = "Waterbody_")
intersect_streams <- sf::st_intersects(buffstream, intersect_parks, prepared = T)
plot(intersect_streams)
polys <- intersect_streams[ grepl("*POLYGON", types), ]
polys <- intersect_streams[ grepl("*POLYGON", intersect_streams), ]
polys <- intersect_streams[ grepl("*POLYGON", intersect_parks), ]
st_dimension(intersect_streams) = 2
intersect_streams <- sf::st_intersects(buffstream, intersect_parks, prepared = T)
tm_shape(intersect_streams) + tm_dots(col = "AreaName", size = 1) +
tm_shape(intersect_streams) + tm_polygons(col = "Waterbody_")
plot(intersect_streams)
View(intersect_streams)
View(intersect_streams)
intersect_streams <- sf::st_intersection(buffstream, intersect_parks)
tm_shape(intersect_parks) + tm_dots(col = "AreaName", size = 1) +
tm_shape(buffstream) + tm_polygons(col = "Waterbody_", scale = 1)
buffstream <- sf::st_buffer(lc_303ds, dist = 804.6) ##0.5mile = 804.6...
intersect_parks <- sf::st_intersection(lc_parks, buffstream)
filpoint <- intersect_parks %>% dplyr::filter(., AreaName == "Branched Oak SRA")
filline <- lc_303ds %>% dplyr::filter(., Waterbody_ == "Middle Oak Creek" | Waterbody_ == "Oak Creek")
tm_shape(filpoint) + tm_dots(col = "AreaName", size = 1) +
tm_shape(filline) + tm_polygons(col = "Waterbody_", scale = 1)
tm_shape(filpoint) + tm_dots(col = "AreaName", size = 1) +
tm_shape(filline) + tm_lines(col = "Waterbody_", scale = 1)
knitr::opts_chunk$set(echo = T, message = F)
library(tidyverse)
library(sp)
library(ggplot2)
library(hrbrthemes)
p.counties <- "../data/CBW/County_Boundaries.shp"
p.stations <- "../data/CBW/Non-Tidal_Water_Quality_Monitoring_Stations_in_the_Chesapeake_Bay.shp"
d.counties <- sf::read_sf(p.counties)
d.stations <- sf::read_sf(p.stations)
glimpse(d.counties)
glimpse(d.stations)
d.counties %>% dplyr::select(GEOID10, ALAND10) %>% head()
d.counties %>% dplyr::select(GEOID10:CLASSFP10) %>% head()
d.counties %>% dplyr::select(-(GEOID10:CLASSFP10)) %>% head()
d.counties %>% dplyr::select(starts_with("C"))
d.counties %>% group_by(STATEFP10) %>% mutate(stateLandArea = sum(ALAND10))
d.counties %>% as_tibble() %>% dplyr::select(-geometry) %>% group_by(STATEFP10) %>% summarise(stateLandArea = sum(ALAND10))
d.counties %>% ggplot(., aes(x = as.factor(STATEFP10), y = ALAND10)) + geom_boxplot(aes(fill = STATEFP10))
d.counties %>% ggplot(., aes(x = ALAND10)) + geom_histogram(aes(fill = STATEFP10)) + labs(title = "not the most useful plot, but you get the idea")
d.counties %>% sf::st_crs()
d.stations %>% sf::st_crs()
d.counties %>% sf::st_crs() == d.stations %>% sf::st_crs()
del.counties <- d.counties %>% dplyr::filter(STATEFP10 == 10)
del.stations <- sf::st_intersection(d.stations, del.counties)
glimpse(del.stations)
plot(del.stations)
del.counties %>% sf::st_area()
perland <- d.counties %>% as_tibble() %>% dplyr::select(-geometry) %>% mutate(Landperc = ALAND10/(ALAND10+AWATER10)*100)
perland[, c('NAME10', 'Landperc')]
landaswater <- d.counties %>% as_tibble() %>% dplyr::select(-geometry) %>% group_by(STATEFP10) %>% summarise(county = NAME10, LargestWaterPerc1 = max(ALAND10/(ALAND10+AWATER10)*100))
landaswater
d.counties %>% group_by(STATEFP10) %>% mutate(count = n())
d.counties %>% as_tibble() %>% dplyr::select(-geometry) %>% group_by(STATEFP10) %>% summarise(count = n())
shortChar <- aggregate(d.stations$STATION_NA, list(d.stations$STATION_NA),
function(s) min(nchar(as.character(s))))
head(shortChar, 1)
require(scales)
p1 <- ggplot(d.counties, aes(x=ALAND10, y=AWATER10, color=STATEFP10)) +
geom_point(size=5) + labs(x= "Land Area",
y="Water Area",
title = "Relationship Between Land Area & Water Area for Each County",
colour="State FIPS 10")
p1 + scale_x_continuous(labels = comma) + scale_y_continuous(labels = comma)
p2 <- ggplot(d.stations, aes(x=Drainage_A)) +
geom_histogram() + labs(x= "Drainage Area", title = "Histogram of Drainage Area")
p2
x <- d.stations$STATION_NA
substrRight <- function(x, n){
substr(x, nchar(x)-n+1, nchar(x))
}
x1 <- d.stations %>% mutate(station_State = substrRight(x, 2))
x1 %>% as_tibble() %>% dplyr::select(-geometry) %>% group_by(station_State)
p3 <- ggplot(x1, aes(x=Drainage_A, fill=station_State)) +
geom_histogram() + labs(x= "Drainage Area", title = "Histogram of Drainage Area")
p3
task3 <- function(...){
if (is.numeric(...)){
list <- c(...)
mean <- mean(list)
med <- median(list)
max <- max(list)
min <- min(list)
results <- c(mean, med, max, min)
sort_list <- sort(list)
cat("List:", sort_list, '\n')
return(cat('Mean / Med / Max / Min:',results, '\n'))
} else {
print("Error: Please insert numeric values")
}
}
task3(c(1, 0, -1))
task3(c(10, 100, 1000))
task3(c(.1, .001, 1e8))
task3(c("a", "b", "c"))
sf::sf_use_s2(F)
all.stations <- sf::st_intersection(d.stations, d.counties)
all.stations %>% group_by(STATEFP10) %>% mutate(count = n())
all.stations %>% as_tibble() %>% dplyr::select(-geometry) %>% group_by(STATEFP10) %>% summarise(count = n())
x <- all.stations$STATION_NA
substrRight <- function(x, n){
substr(x, nchar(x)-n+1, nchar(x))
}
all.stations <- all.stations %>% mutate(station_State = substrRight(x, 2))
ny.counties <- all.stations %>% dplyr::filter(station_State == 'NY')
ny.counties %>% as_tibble() %>% dplyr::select(-geometry) %>% group_by(station_State) %>% summarise(avg_size_NY = mean(ALAND10))
meanDrainage <- all.stations %>% as_tibble() %>% dplyr::select(-geometry) %>% group_by(station_State) %>% summarise(avg_drainage = mean(Drainage_A))
s.meanDrainage <- arrange(meanDrainage, desc(avg_drainage))
head(s.meanDrainage, 1)
class(d.stations)
class(del.counties)
class(d.stations)
?st_intersection
d.stations %>% mutate(length = min(nchar(STATION_NA)))
?aggregate
shortChar <- aggregate(d.stations$STATION_NA, list(d.stations$STATION_NA),
function(s) min(nchar(as.character(s))))
head(shortChar, 1)
shortChar <- aggregate(d.stations$STATION_NA, list(d.stations$STATION_NA),
function(s) max(nchar(as.character(s))))
head(shortChar, 1)
head(shortChar, 10)
shortChar <- aggregate(d.stations$STATION_NA, list(d.stations$STATION_NA),
function(s) mean(nchar(as.character(s))))
head(shortChar, 10)
shortChar <- aggregate(d.stations$STATION_NA, list(d.stations$STATION_NA),
function(s) min(nchar(as.character(s))))
?sf_use_s2
